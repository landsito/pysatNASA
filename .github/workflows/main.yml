# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Pytest with Flake8

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.11", "3.12"]
        numpy_ver: ["latest"]
        test_config: ["latest"]
        include:
          - python-version: "3.10"
            numpy_ver: "1.23"
            os: ubuntu-latest
            test_config: "NEP29"
          - python-version: "3.6.8"
            numpy_ver: "1.19.5"
            os: "ubuntu-20.04"
            test_config: "Ops"

    name: Python ${{ matrix.python-version }} on ${{ matrix.os }} with numpy ${{ matrix.numpy_ver }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Reinstall fortran on MacOS
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew reinstall gcc

    - name: Install Operational dependencies
      if: ${{ matrix.test_config == 'Ops'}}
      run: |
        sudo apt-get install libhdf5-serial-dev netcdf-bin libnetcdf-dev
        pip install --no-cache-dir numpy==${{ matrix.numpy_ver }}
        pip install "cdflib<1.0"
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        cd ..
        git clone https://github.com/pysat/pysat.git
        cd pysat
        git checkout pip_rc_install
        python setup.py develop
        cd ../pysatNASA
        pip install .

    - name: Install NEP29 dependencies
      if: ${{ matrix.test_config == 'NEP29'}}
      run: |
        pip install numpy==${{ matrix.numpy_ver }}
        pip install --upgrade-strategy only-if-needed .[test]

    - name: Install standard dependencies
      if: ${{ matrix.test_config == 'latest'}}
      run: |
        pip install .[test]

    - name: Set up pysat
      run: |
        mkdir pysatData
        python -c "import pysat; pysat.params['data_dirs'] = 'pysatData'"

    - name: Test PEP8 compliance
      run: flake8 . --count --select=D,E,F,H,W --show-source --statistics

    - name: Evaluate complexity
      run: flake8 . --count --exit-zero --max-complexity=10 --statistics

    - name: Test with pytest
      run: pytest

    - name: Coveralls Parallel (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        COVERALLS_PARALLEL: true
      run: |
        curl -sL https://coveralls.io/coveralls-linux.tar.gz | tar -xz
        ./coveralls report --parallel --repo-token=${{ secrets.COVERALLS_REPO_TOKEN }} --build-number ${{ github.run_number }}

    - name: Coveralls Parallel (Windows)
      if: startsWith(matrix.os, 'windows')
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        COVERALLS_PARALLEL: true
      run: |
        curl -L https://github.com/coverallsapp/coverage-reporter/releases/latest/download/coveralls-windows.exe -o coveralls.exe
        ./coveralls.exe report --parallel --repo-token=${{ secrets.COVERALLS_REPO_TOKEN }} --build-number ${{ github.run_number }}

    - name: Coveralls Parallel (MacOS)
      if: startsWith(matrix.os, 'macos')
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        COVERALLS_PARALLEL: true
      run: |
        brew tap coverallsapp/coveralls --quiet
        brew install coveralls --quiet
        ls -lh .coverage
        ls -lh coverage.xml
        coveralls report coverage.xml --format=cobertura --verbose --parallel --repo-token=${{ secrets.COVERALLS_REPO_TOKEN }} --build-number ${{ github.run_number }}

  finish:
    name: Finish Coverage Analysis
    needs: build
    if: always()
    runs-on: "ubuntu-latest"
    steps:
      - name: Coveralls Finish
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_PARALLEL: true
        run: |
          curl -sL https://coveralls.io/coveralls-linux.tar.gz | tar -xz
          ./coveralls done --build-number ${{ github.run_number }}
